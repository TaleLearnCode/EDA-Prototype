// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BuildingBricks.Core.Models;

public partial class CoreContext : DbContext
{
    public CoreContext(DbContextOptions<CoreContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<CountryDivision> CountryDivision { get; set; }

    public virtual DbSet<WorldRegion> WorldRegion { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Core.Database;Integrated Security=true");

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryCode).HasName("pkcCountry");

            entity.ToTable("Country", "Core", tb => tb.HasComment("Lookup table representing the countries as defined by the ISO 3166-1 standard."));

            entity.HasIndex(e => e.WorldRegionCode, "idxCountry_WorldRegionCode");

            entity.HasIndex(e => e.WorldSubregionCode, "idxCountry_WorldSubregionCode");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the country using the ISO 3166-1 Alpha-2 code.");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the country using the ISO 3166-1 Country Name.");
            entity.Property(e => e.DivisionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The primary name of the country''s divisions.");
            entity.Property(e => e.HasDivisions).HasComment("Flag indicating whether the country has divisions (states, provinces, etc.)");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the country record is active.");
            entity.Property(e => e.WorldRegionCode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region where the country is located.");
            entity.Property(e => e.WorldSubregionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world subregion where the country is located.");

            entity.HasOne(d => d.WorldRegionCodeNavigation).WithMany(p => p.CountryWorldRegionCodeNavigation)
                .HasForeignKey(d => d.WorldRegionCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCountry_WorldRegion");

            entity.HasOne(d => d.WorldSubregionCodeNavigation).WithMany(p => p.CountryWorldSubregionCodeNavigation)
                .HasForeignKey(d => d.WorldSubregionCode)
                .HasConstraintName("fkCountry_WorldSubregion");
        });

        modelBuilder.Entity<CountryDivision>(entity =>
        {
            entity.HasKey(e => new { e.CountryCode, e.CountryDivisionCode }).HasName("pkcCountryDivision");

            entity.ToTable("CountryDivision", "Core", tb => tb.HasComment("Lookup table representing the world regions as defined by the ISO 3166-2 standard."));

            entity.Property(e => e.CountryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CountryDivisionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the country division using the ISO 3166-2 Alpha-2 code.");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The category name of the country division.");
            entity.Property(e => e.CountryDivisionName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the country using the ISO 3166-2 Subdivision Name.");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the country division record is active.");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.CountryDivision)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkCountryDivision_Country");
        });

        modelBuilder.Entity<WorldRegion>(entity =>
        {
            entity.HasKey(e => e.WorldRegionCode).HasName("pkcWorldRegion");

            entity.ToTable("WorldRegion", "Core", tb => tb.HasComment("Lookup table representing the world regions as defined by the UN M49 specification."));

            entity.HasIndex(e => e.ParentId, "idxWorldRegion_ParentId");

            entity.Property(e => e.WorldRegionCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region.");
            entity.Property(e => e.IsActive).HasComment("Flag indicating whether the world region is active.");
            entity.Property(e => e.ParentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifier of the world region parent (for subregions).");
            entity.Property(e => e.WorldRegionName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of the world region.");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("fkWorldRegion_WorldRegion");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}