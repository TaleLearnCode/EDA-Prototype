// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BuildingBricks.Core;
using BuildingBricks.Core.Enumerations;
using Microsoft.EntityFrameworkCore;

namespace BuildingBricks.Notice.Models;

public partial class NoticeContext : DbContext
{

	private ConfigServices _configServices;

	public NoticeContext()
	{
	}

	public NoticeContext(ConfigServices configServices) => _configServices = configServices;

	public NoticeContext(DbContextOptions<NoticeContext> options)
			: base(options)
	{
	}

	public virtual DbSet<Customer> Customers { get; set; }

	public virtual DbSet<NoticeLog> NoticeLogs { get; set; }

	public virtual DbSet<NoticeType> NoticeTypes { get; set; }

	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		=> optionsBuilder.UseSqlServer(_configServices.AzureSqlConnectionString(BuildingBrickSystem.Notice));


	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Customer>(entity =>
		{
			entity.HasKey(e => e.CustomerId).HasName("pkcCustomer");

			entity.ToTable("Customer", "Purchase", tb => tb.HasComment("Represents a customer receiving notifications."));

			entity.Property(e => e.CustomerId)
							.ValueGeneratedNever()
							.HasComment("Identifier for the customer.");
			entity.Property(e => e.EmailAddress)
							.IsRequired()
							.HasMaxLength(255)
							.IsUnicode(false)
							.HasComment("The email address where the customer will receive notifications.");
		});

		modelBuilder.Entity<NoticeLog>(entity =>
		{
			entity.HasKey(e => e.NoticeLogId).HasName("pkcNoticeLog");

			entity.ToTable("NoticeLog", "Notice", tb => tb.HasComment("Represents the log of notices sent to customers."));

			entity.Property(e => e.NoticeLogId).HasComment("Identifier for the notice log.");
			entity.Property(e => e.CustomerId).HasComment("Identifier for the associated customer.");
			entity.Property(e => e.NoticeBody)
							.IsRequired()
							.HasMaxLength(2000)
							.HasComment("The body of the notice message.");
			entity.Property(e => e.NoticeTypeId).HasComment("Identifier for the associated notice type.");
			entity.Property(e => e.SentDateTime)
							.HasDefaultValueSql("(getutcdate())")
							.HasComment("The UTC date and time the notice was sent.");

			entity.HasOne(d => d.Customer).WithMany(p => p.NoticeLogs)
							.HasForeignKey(d => d.CustomerId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkNotificationLog_Customer");

			entity.HasOne(d => d.NoticeType).WithMany(p => p.NoticeLogs)
							.HasForeignKey(d => d.NoticeTypeId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkNotificationLog_NotificationType");
		});

		modelBuilder.Entity<NoticeType>(entity =>
		{
			entity.HasKey(e => e.NoticeTypeId).HasName("pkcNoticeType");

			entity.ToTable("NoticeType", "Notice", tb => tb.HasComment("Represents the types of notices sent to customers."));

			entity.Property(e => e.NoticeTypeId)
							.ValueGeneratedNever()
							.HasComment("Identifier for the notice type.");
			entity.Property(e => e.NoticeTypeName)
							.IsRequired()
							.HasMaxLength(100)
							.IsUnicode(false)
							.HasComment("Name of the notice type.");
		});

		OnModelCreatingPartial(modelBuilder);
	}

	partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}