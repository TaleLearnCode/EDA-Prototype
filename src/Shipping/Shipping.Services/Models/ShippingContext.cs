// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BuildingBricks.Core;
using BuildingBricks.Core.Enumerations;
using Microsoft.EntityFrameworkCore;

namespace BuildingBricks.Shipping.Models;

public partial class ShippingContext : DbContext
{

	private ConfigServices _configServices;

	public ShippingContext()
	{
	}

	public ShippingContext(ConfigServices configServices) => _configServices = configServices;

	public ShippingContext(DbContextOptions<ShippingContext> options)
			: base(options)
	{
	}

	public virtual DbSet<Customer> Customers { get; set; }

	public virtual DbSet<CustomerPurchase> CustomerPurchases { get; set; }

	public virtual DbSet<OrderItem> OrderItems { get; set; }

	public virtual DbSet<Product> Products { get; set; }

	public virtual DbSet<Shipment> Shipments { get; set; }

	public virtual DbSet<ShipmentStatus> ShipmentStatuses { get; set; }

	public virtual DbSet<ShipmentStatusDetail> ShipmentStatusDetails { get; set; }

	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		=> optionsBuilder.UseSqlServer(_configServices.AzureSqlConnectionString(BuildingBrickSystem.Shipping));

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Customer>(entity =>
		{
			entity.HasKey(e => e.CustomerId).HasName("pkcCustomer");

			entity.ToTable("Customer", "Purchase");

			entity.Property(e => e.CustomerId).ValueGeneratedNever();
			entity.Property(e => e.City)
							.IsRequired()
							.HasMaxLength(100);
			entity.Property(e => e.CountryCode)
							.IsRequired()
							.HasMaxLength(2)
							.IsUnicode(false)
							.IsFixedLength();
			entity.Property(e => e.CountryDivisionCode)
							.HasMaxLength(3)
							.IsUnicode(false)
							.IsFixedLength();
			entity.Property(e => e.FirstName)
							.IsRequired()
							.HasMaxLength(100);
			entity.Property(e => e.LastName)
							.IsRequired()
							.HasMaxLength(100);
			entity.Property(e => e.PostalCode)
							.HasMaxLength(20)
							.IsUnicode(false);
			entity.Property(e => e.StreetAddress)
							.IsRequired()
							.HasMaxLength(100);
		});

		modelBuilder.Entity<CustomerPurchase>(entity =>
		{
			entity.HasKey(e => e.CustomerPurchaseId).HasName("pkcCustomerPurchase");

			entity.ToTable("CustomerPurchase", "Purchase");

			entity.Property(e => e.CustomerPurchaseId)
							.HasMaxLength(36)
							.IsUnicode(false)
							.IsFixedLength();
		});

		modelBuilder.Entity<OrderItem>(entity =>
		{
			entity.HasKey(e => e.OrderItemId).HasName("pkcOrderItem");

			entity.ToTable("OrderItem", "Purchase");

			entity.Property(e => e.OrderItemId).ValueGeneratedNever();
			entity.Property(e => e.CustomerOrderId)
							.IsRequired()
							.HasMaxLength(36)
							.IsUnicode(false)
							.IsFixedLength();
			entity.Property(e => e.ProductId)
							.IsRequired()
							.HasMaxLength(5)
							.IsUnicode(false)
							.IsFixedLength();

			entity.HasOne(d => d.CustomerOrder).WithMany(p => p.OrderItems)
							.HasForeignKey(d => d.CustomerOrderId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkOrderItem_CustomerOrder");

			entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)
							.HasForeignKey(d => d.ProductId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkOrderItem_Product");
		});

		modelBuilder.Entity<Product>(entity =>
		{
			entity.HasKey(e => e.ProductId).HasName("pkcProduct");

			entity.ToTable("Product", "Product");

			entity.Property(e => e.ProductId)
							.HasMaxLength(5)
							.IsUnicode(false)
							.IsFixedLength();
			entity.Property(e => e.ProductName)
							.IsRequired()
							.HasMaxLength(100);
		});

		modelBuilder.Entity<Shipment>(entity =>
		{
			entity.HasKey(e => e.ShipmentId).HasName("pkcShipment");

			entity
							.ToTable("Shipment", "Shipping", tb => tb.HasComment("Represents a shipment of product to a customer."))
							.ToTable(tb => tb.IsTemporal(ttb =>
									{
									ttb.UseHistoryTable("ShipmentHistory", "Shipping");
									ttb
													.HasPeriodStart("ValidFrom")
													.HasColumnName("ValidFrom");
									ttb
													.HasPeriodEnd("ValidTo")
													.HasColumnName("ValidTo");
								}));

			entity.Property(e => e.ShipmentId).HasComment("Identifier for the shipment.");
			entity.Property(e => e.CustomerPurchaseId)
							.IsRequired()
							.HasMaxLength(36)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Identifier for the associated customer purchase.");
			entity.Property(e => e.ShipmentStatusId).HasComment("Identifier for the associated shipment status.");

			entity.HasOne(d => d.CustomerPurchase).WithMany(p => p.Shipments)
							.HasForeignKey(d => d.CustomerPurchaseId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkShipment_CustomerPurchase");

			entity.HasOne(d => d.ShipmentStatus).WithMany(p => p.Shipments)
							.HasForeignKey(d => d.ShipmentStatusId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkShipment_ShipmentStatus");
		});

		modelBuilder.Entity<ShipmentStatus>(entity =>
		{
			entity.HasKey(e => e.ShipmentStatusId).HasName("pkcShipmentStatus");

			entity.ToTable("ShipmentStatus", "Shipping", tb => tb.HasComment("Represents the status for a shipment."));

			entity.Property(e => e.ShipmentStatusId)
							.ValueGeneratedNever()
							.HasComment("Identifier for the shipment status record.");
			entity.Property(e => e.ShipmentStatusName)
							.IsRequired()
							.HasMaxLength(100)
							.IsUnicode(false)
							.HasComment("Name of the shipment status.");
		});

		modelBuilder.Entity<ShipmentStatusDetail>(entity =>
		{
			entity.HasKey(e => e.ShipmentStatusDetailId).HasName("pkcShipmentStatusDetail");

			entity.ToTable("ShipmentStatusDetail", "Shipping", tb => tb.HasComment("Represents the status for a shipment."));

			entity.Property(e => e.ShipmentStatusDetailId).HasComment("Identifier for the shipment status detail record.");
			entity.Property(e => e.ShipmentId).HasComment("Identifier for the associated shipment record.");
			entity.Property(e => e.ShipmentStatusId).HasComment("Identifier for the associated shipment status.");
			entity.Property(e => e.StatusDateTime)
							.HasDefaultValueSql("(getutcdate())")
							.HasComment("The UTC date/time of the shipment status.");

			entity.HasOne(d => d.Shipment).WithMany(p => p.ShipmentStatusDetails)
							.HasForeignKey(d => d.ShipmentId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkShipmentStatusDetail_Shipment");

			entity.HasOne(d => d.ShipmentStatus).WithMany(p => p.ShipmentStatusDetails)
							.HasForeignKey(d => d.ShipmentStatusId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkShipmentStatusDetails_ShipmentStatus");
		});

		OnModelCreatingPartial(modelBuilder);
	}

	partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}