// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BuildingBricks.Core;
using BuildingBricks.Core.Enumerations;
using Microsoft.EntityFrameworkCore;

namespace BuildingBricks.Purchase.Models;

public partial class PurchaseContext : DbContext
{

	private ConfigServices _configServices;

	public PurchaseContext()
	{
	}

	public PurchaseContext(ConfigServices configServices) => _configServices = configServices;

	public PurchaseContext(DbContextOptions<PurchaseContext> options)
			: base(options)
	{
	}

	public virtual DbSet<Country> Countries { get; set; }

	public virtual DbSet<CountryDivision> CountryDivisions { get; set; }

	public virtual DbSet<Customer> Customers { get; set; }

	public virtual DbSet<CustomerPurchase> CustomerPurchases { get; set; }

	public virtual DbSet<Product> Products { get; set; }

	public virtual DbSet<PurchaseLineItem> PurchaseLineItems { get; set; }

	public virtual DbSet<PurchaseStatus> PurchaseStatuses { get; set; }

	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		=> optionsBuilder.UseSqlServer(_configServices.AzureSqlConnectionString(BuildingBrickSystem.Purchase));


	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Country>(entity =>
		{
			entity.HasKey(e => e.CountryCode).HasName("pkcCountry");

			entity.ToTable("Country", "Core", tb => tb.HasComment("Lookup table representing the countries as defined by the ISO 3166-1 standard."));

			entity.Property(e => e.CountryCode)
							.HasMaxLength(2)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Identifier of the country using the ISO 3166-1 Alpha-2 code.");
			entity.Property(e => e.CountryName)
							.IsRequired()
							.HasMaxLength(100)
							.IsUnicode(false)
							.HasComment("Name of the country using the ISO 3166-1 Country Name.");
			entity.Property(e => e.DivisionName)
							.HasMaxLength(100)
							.IsUnicode(false)
							.HasComment("The primary name of the country's divisions.");
			entity.Property(e => e.HasDivisions).HasComment("Flag indicating whether the country has divisions (states, provinces, etc.)");
			entity.Property(e => e.IsActive).HasComment("Flag indicating whether the country record is active.");
		});

		modelBuilder.Entity<CountryDivision>(entity =>
		{
			entity.HasKey(e => new { e.CountryCode, e.CountryDivisionCode }).HasName("pkcCountryDivision");

			entity.ToTable("CountryDivision", "Core", tb => tb.HasComment("Lookup table representing the world regions as defined by the ISO 3166-2 standard."));

			entity.Property(e => e.CountryCode)
							.HasMaxLength(2)
							.IsUnicode(false)
							.IsFixedLength();
			entity.Property(e => e.CountryDivisionCode)
							.HasMaxLength(3)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Identifier of the country division using the ISO 3166-2 Alpha-2 code.");
			entity.Property(e => e.CategoryName)
							.IsRequired()
							.HasMaxLength(100)
							.IsUnicode(false)
							.HasComment("The category name of the country division.");
			entity.Property(e => e.CountryDivisionName)
							.IsRequired()
							.HasMaxLength(100)
							.IsUnicode(false)
							.HasComment("Name of the country using the ISO 3166-2 Subdivision Name.");
			entity.Property(e => e.IsActive).HasComment("Flag indicating whether the country division record is active.");

			entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.CountryDivisions)
							.HasForeignKey(d => d.CountryCode)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkCountryDivision_Country");
		});

		modelBuilder.Entity<Customer>(entity =>
		{
			entity.HasKey(e => e.CustomerId).HasName("pkcCustomer");

			entity.ToTable("Customer", "Purchase", tb => tb.HasComment("Represents a customer making purchases."));

			entity.Property(e => e.CustomerId).HasComment("Identifier for the customer.");
			entity.Property(e => e.City)
							.IsRequired()
							.HasMaxLength(100)
							.HasComment("The city for the customer shipping address.");
			entity.Property(e => e.CountryCode)
							.IsRequired()
							.HasMaxLength(2)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Code for the country for the customer shipping address.");
			entity.Property(e => e.CountryDivisionCode)
							.HasMaxLength(3)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Code for the country division for the customer shipping address.");
			entity.Property(e => e.EmailAddress)
							.IsRequired()
							.HasMaxLength(255)
							.IsUnicode(false)
							.HasComment("Email address for the customer");
			entity.Property(e => e.FirstName)
							.IsRequired()
							.HasMaxLength(100)
							.HasComment("The first name of the customer.");
			entity.Property(e => e.LastName)
							.IsRequired()
							.HasMaxLength(100)
							.HasComment("The last name of the customer.");
			entity.Property(e => e.PostalCode)
							.HasMaxLength(20)
							.IsUnicode(false)
							.HasComment("Postal code for the customer shipping address.");
			entity.Property(e => e.StreetAddress)
							.IsRequired()
							.HasMaxLength(100)
							.HasComment("The street address for the customer.");

			entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Customers)
							.HasForeignKey(d => d.CountryCode)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkCustomer_Country");

			entity.HasOne(d => d.Country).WithMany(p => p.Customers)
							.HasForeignKey(d => new { d.CountryCode, d.CountryDivisionCode })
							.HasConstraintName("fkCustomer_CountryDivision");
		});

		modelBuilder.Entity<CustomerPurchase>(entity =>
		{
			entity.HasKey(e => e.CustomerPurchaseId).HasName("pkcCustomerPurchase");

			entity.ToTable("CustomerPurchase", "Purchase", tb => tb.HasComment("Represents a purchase by a customer."));

			entity.Property(e => e.CustomerPurchaseId)
							.HasMaxLength(36)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Identifier for the customer purchase.");
			entity.Property(e => e.CompleteDateTime).HasComment("The UTC date and time of when the purchase is completed (shipment received).");
			entity.Property(e => e.CustomerId).HasComment("Identifier for the associated customer.");
			entity.Property(e => e.PurchaseDateTime)
							.HasDefaultValueSql("(getutcdate())")
							.HasComment("The UTC date and time of the purchase.");
			entity.Property(e => e.PurchaseStatusId)
							.HasDefaultValueSql("((1))")
							.HasComment("Identifier for the current purchase status.");
			entity.Property(e => e.ReserveDateTime).HasComment("The UTC date and time of when the product(s) are reserved for the purchase.");
			entity.Property(e => e.ShipDateTime).HasComment("The UTC date and time of when the purchase is shipped.");

			entity.HasOne(d => d.Customer).WithMany(p => p.CustomerPurchases)
							.HasForeignKey(d => d.CustomerId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkCustomerPurchase_Customer");

			entity.HasOne(d => d.PurchaseStatus).WithMany(p => p.CustomerPurchases)
							.HasForeignKey(d => d.PurchaseStatusId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkCustomerPurchase_PurchaseStatus");
		});

		modelBuilder.Entity<Product>(entity =>
		{
			entity.HasKey(e => e.ProductId).HasName("pkcProduct");

			entity.ToTable("Product", "Product", tb => tb.HasComment("Represents a product in inventory."));

			entity.Property(e => e.ProductId)
							.HasMaxLength(5)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Identifier for the product.");
			entity.Property(e => e.Price)
							.HasComment("The current price for the product.")
							.HasColumnType("smallmoney");
			entity.Property(e => e.ProductName)
							.IsRequired()
							.HasMaxLength(100)
							.HasComment("Name for the product.");
		});

		modelBuilder.Entity<PurchaseLineItem>(entity =>
		{
			entity.HasKey(e => e.PurchaseLineItemId).HasName("pkcPurchaseLineItem");

			entity
							.ToTable("PurchaseLineItem", "Purchase", tb => tb.HasComment("Represents a line item within a purchase."))
							.ToTable(tb => tb.IsTemporal(ttb =>
									{
									ttb.UseHistoryTable("PurchaseLineItemHistory", "Purchase");
									ttb
													.HasPeriodStart("ValidFrom")
													.HasColumnName("ValidFrom");
									ttb
													.HasPeriodEnd("ValidTo")
													.HasColumnName("ValidTo");
								}));

			entity.Property(e => e.PurchaseLineItemId).HasComment("Identifier for the purchase line item.");
			entity.Property(e => e.CustomerPurchaseId)
							.IsRequired()
							.HasMaxLength(36)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Identifier for the associated customer purchase.");
			entity.Property(e => e.DateTimeAdded).HasDefaultValueSql("(getutcdate())");
			entity.Property(e => e.ProductId)
							.IsRequired()
							.HasMaxLength(5)
							.IsUnicode(false)
							.IsFixedLength()
							.HasComment("Identifier for the associated product.");
			entity.Property(e => e.ProductPrice)
							.HasComment("The purchase price of the product.")
							.HasColumnType("smallmoney");
			entity.Property(e => e.PurchaseStatusId)
							.HasDefaultValueSql("((1))")
							.HasComment("Identifier of the current status for the line item.");
			entity.Property(e => e.Quantity).HasComment("The quantity of product being purchased.");

			entity.HasOne(d => d.CustomerPurchase).WithMany(p => p.PurchaseLineItems)
							.HasForeignKey(d => d.CustomerPurchaseId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkPurchaseLineItem_CustomerPurchase");

			entity.HasOne(d => d.Product).WithMany(p => p.PurchaseLineItems)
							.HasForeignKey(d => d.ProductId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkPurchaseLineItem_Product");

			entity.HasOne(d => d.PurchaseStatus).WithMany(p => p.PurchaseLineItems)
							.HasForeignKey(d => d.PurchaseStatusId)
							.OnDelete(DeleteBehavior.ClientSetNull)
							.HasConstraintName("fkPurchaseLineItem_PurchaseStatus");
		});

		modelBuilder.Entity<PurchaseStatus>(entity =>
		{
			entity.HasKey(e => e.PurchaseStatusId).HasName("pkcPurchaseStatus");

			entity.ToTable("PurchaseStatus", "Purchase", tb => tb.HasComment("Represents the status of a purchase."));

			entity.Property(e => e.PurchaseStatusId)
							.ValueGeneratedNever()
							.HasComment("Identifier for the purchase status.");
			entity.Property(e => e.PurchaseStatusName)
							.IsRequired()
							.HasMaxLength(100)
							.IsUnicode(false)
							.HasComment("Name for the purchase status.");
		});

		OnModelCreatingPartial(modelBuilder);
	}

	partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}